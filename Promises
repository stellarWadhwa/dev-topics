a callback function is attached to the promise object.
i.e. 
promise.then();

By design, fetch function returns a promise.

The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
'
promises are also immutable.

proimise chain

createOrder()
.then(()=>{})
.then(()=>{})
*****************************************************************************************
//In the code below i have created a promise and handled the resolve and reject for it.

const pr=new Promise((resolve,reject)=>{

    setTimeout(()=>{
            const x=Math.floor(Math.random() * 10)
        if(x>5){
            resolve(x);
        }
        else reject(new Error("Number is Small"));
    },1000)
})

pr.then((res)=>{
    console.log("Number is valid, your number is:"+ res)
})
.catch((err)=>{
    console.log(err)
})
************************************************************************
.finally()
The .finally() method in promises serves the purpose of allowing you to execute a callback function regardless of whether the promise is fulfilled or rejected. It provides a way to perform cleanup tasks or execute logic that should run regardless of the promise's outcome.
fetchData()
    .then((data) => {
        console.log(data); // Logs: "Data fetched successfully"
    })
    .catch((error) => {
        console.error("Error fetching data:", error);
    })
    .finally(() => {
        console.log("Cleanup tasks complete"); // Logs: "Cleanup tasks complete"
    });
.finally is not a part of the promise itself but it is a method that can be called on the promise object.


Promise API's

//Used for parallel api calls and multiple promises.
it takes an array of promises.
promise.all([p1,p2,p3]);
after this it will make 3 parallel api calls.
suppose; p1=1s,p2=2s,p3=3s for resolving.

//all resolved
if all the api calls are succesfully then it will return the result of all these calls after 3s in an array.

//if one get rejected
promise.all([p1,p2,p3]);
suppose p2 fails, then promise.all will throw an err, err will be same as that of the promise that failed, it will be returned as soon as err occurs.

//Promise.allSettled

In case of all promises success it will execute in same manner as that of promise.all.

//if one got rejected.
When all are settled, irrespective of success or failure, it will still wait for all of the promises to settle and then return an error of result where the succesfull promise will have the result and rejected one will have the error.


//Promise.race
//success case
As soon as one of the promise is settled in this case resolved, it will return its value as a result. Not an array! but a value as a result.

//fail case
As Soon as one of the promise gets settled in this case rejected, it will throw an error as result, not an array of all promises but a value.

//promise.any
//success
in promise.any whichever promise gets resolved first will be returned as result
//failure
suppose a promise is rejected, it will not return the result but will wait for a value to be resolved. only a resolved promise will be returned
// all promise fails
returned result will an aggregated error, it will be an array of all the err








Suppose there is an async function with a promise.
Now, when an async function is in the call stack, then it initiates all promises's execution. as soon as it reached the await line, async function is taken out of the call stack to not block the main thread. when the promise is resolved then, async function comes back into the call stack and then it is resolved.

//some cases

1 const f1=async()=>{
const res1=await p1; //time needed is 10sec
const res2=await p2; //time needed is 20sec
}

when f1 is called, it will notic all of the promises in it and then as soon as it will hit the line with await, it will take the function out of the call stack. 
When it is taken out of the call stack, both of them are being resolved, when time of the first await line i.e. 10sec is up, then it will be added back to the call stack. 
Then p1 will be resolved, after that it will go to the next line which has await again, so it will take the function out of the call stack, time remaining now=20-10=10sec. So, as soon as p2 will be settled, it will be added to the call stack.

2  const f1=async()=>{
const res2=await p2; //time needed is 20sec
const res1=await p1; //time needed is 10sec
}

Now, i have changed the order of the promises in the function, now using the same logic, p2 needs to be resolved first and when its time i.e. 20sec is completed function will come back to the call stack and 
it will then go to the next line of await, and check if it is settled, but this time it is settled so it will be done also.


In first case, first will execute after 10 seconds and second will execute after 20 seconds.
In second case, first and second both will be executed after 20 seconds.

*******************************************************************************************************
//below is the code for above theory about async/await

const p1=new Promise((resolve,reject)=>{
    setTimeout(()=>{
        resolve("p1 is here");
    },5000)
})

const p2=new Promise((resolve,reject)=>{
    setTimeout(()=>{
        resolve("p2 is here");
    },10000)
})
const f1=async()=>{
   ;
    await p1;
    console.log("p1")
    console.log(p1);
    
     await p2;
    console.log("p2")
    console.log(p2)
}
f1();

**********************************************************************************************************
**********************************************************************************************************
const f1=async()=>{
const x=    await p1.then(()=> p2);
console.log(x);
}
//in this it will log the value of p2 only because value of p1 is overwritten, if i want different values then i should await them seperately.
